Introduction.

cprobid is a software for peptide identification from MS/MS data  using protein sequence database (FASTA format). 
This is c++ implementation of ProbID algorithm Java version of which  is available from sashimi project  

Installation.

./configure CXXFLAGS= CFLAGS= 
make install


Program Characteristics.

cprobid uses:
1. Proteins sequence database in FASTA format
2. MsMs data in mzXML format
3. only digestion with trypsin is implemented

cprobid produces:
files in pepXML format for down stream processing with trans proteomic pipeline


How to use:

Scenario:
1. cd <directory where you keep mzXML files>
2. cprobid <parameter_file>; to get  pepXML file(s)
3. xinteract -Op *.xml ; this command does TPP processing
Example of parameter file called 'cprobid.param' is provided

Requirements:
1.cprobid keeps protein database in memory. So check how much you have and what is the size of fasta file (I will correct this in future)
2.depends on: libxerces-c.so, libgsl, libgslcblas, libcln, libz, libm


Notes: 
1. fragments of cod from mzxml2others were used
2. program can use mzXML files produced by mzStar,mzWiff or importWiff. I did not test mzXML files produced by other converters (they should be processed ok). I would recommend to use importWiff for wiff files. importWiff is available from http://sourceforge.net/projects/cprobid. importWiff estimates precursor charges while mzStar and mzWiff do not (as far as I can tell). mzXML files produced by importWiff are not exactly mzXML files, however it seems that only analysis with Libra will be affected. Estimation of precursor charges reduce computation time significantly and produce more reliable results (again as far as I can tell based on personal experience). Because precursor charges  are not estimated by mzStar and mzWiff  cprobid searches all possible variants between min- and max-precursor charge (see cprobid.param). This senseless  search results in a lot of junk which affects downstream analysis with TPP. Because only top scores are processed by  PeptideProphet some real peptides are lost when junk is at the top. Because PeptideProphet uses only top scores do not set n_out > 1 in cprobid.param if you are using TPP otherwise PeptideProphet will not process pepXML file produced by cprobid. 
3. Running time is around 10-20 min for average size of mzXML data on Dell Precision 470n, 2.8 GHz, 64-bit RedHat for human subset of sequences from SWISS-Prot.

Changes from version 1.0.4:
1. new algorithm for generation of peptide modifications  
2. new algorithm for immonium ion encoding

